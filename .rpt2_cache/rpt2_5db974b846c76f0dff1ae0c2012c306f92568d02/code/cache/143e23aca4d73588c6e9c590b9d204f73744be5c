{"code":"export function serializeResponse(response) {\r\n    var res = {\r\n        streamBody: !!response.body,\r\n        init: {},\r\n    };\r\n    if (response.status)\r\n        res.init.status = response.status;\r\n    if (response.statusText)\r\n        res.init.statusText = response.statusText;\r\n    var headers = {};\r\n    response.headers.forEach(function (v, k) {\r\n        headers[k] = v;\r\n    });\r\n    if (Object.keys(headers).length > 0)\r\n        res.init.headers = headers;\r\n    // If there's no body attr, this browser doesn't support readable streams.\r\n    // We need to get the blob and see if it exists.\r\n    if (response.body === undefined) {\r\n        return response.blob().then(function (blob) {\r\n            // 0 size and empty type mean it's a null body\r\n            if (blob.size === 0 && blob.type === '') {\r\n                res.body = null;\r\n                // Otherwise, set blob as the body\r\n            }\r\n            else {\r\n                res.body = blob;\r\n            }\r\n            return res;\r\n        });\r\n    }\r\n    return Promise.resolve(res);\r\n}\r\nexport function deserializeResponse(res) {\r\n    return new Response(res.body, res.init);\r\n}\r\nexport function serializeRequest(request) {\r\n    var req = {\r\n        url: request.url,\r\n        init: {},\r\n    };\r\n    // Iterate over supported values & copy.\r\n    ['method', 'mode', 'credentials', 'cache', 'redirect', 'referrer', 'integrity'].forEach(function (key) {\r\n        if (request[key]) {\r\n            req[key] = request[key];\r\n        }\r\n    });\r\n    // Copy headers if there are any.\r\n    var headers = {};\r\n    request.headers.forEach(function (v, k) {\r\n        headers[k] = v;\r\n    });\r\n    if (Object.keys(headers).length > 0) {\r\n        req.init.headers = headers;\r\n    }\r\n    return request.blob().then(function (blob) {\r\n        if (blob.size !== 0) {\r\n            req.init.body = blob;\r\n        }\r\n        return req;\r\n    });\r\n}\r\nexport function deserializeRequest(req) {\r\n    return new Request(req.url, req.init);\r\n}\r\n","references":["/Users/ericsimons/dev/localservice/src/core/interfaces.ts"],"dts":{"name":"/Users/ericsimons/dev/localservice/core/lib/serializers.d.ts","writeByteOrderMark":false,"text":"import { SerializedResponse, SerializedRequest } from '../interfaces';\r\nexport declare function serializeResponse(response: Response): Promise<SerializedResponse>;\r\nexport declare function deserializeResponse(res: SerializedResponse): Response;\r\nexport declare function serializeRequest(request: Request): Promise<SerializedRequest>;\r\nexport declare function deserializeRequest(req: SerializedRequest): Request;\r\n"}}
